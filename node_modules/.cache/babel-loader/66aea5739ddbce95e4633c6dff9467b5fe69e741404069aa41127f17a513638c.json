{"ast":null,"code":"export const losingCombination = (arr1, arr2, arr3, arr4, arr5) => {\n  let matrix = [[...arr1], [...arr2], [...arr3], [...arr4], [...arr5]];\n  let min = Math.min(...arr1);\n  let max = Math.max(...arr1);\n  for (let i = 0; i < matrix.length - 2; i++) {\n    for (let j = 0; j < arr1.length; j++) {\n      if (matrix[i][j] === matrix[i + 1][j] && matrix[i][j] === matrix[i + 2][j]) {\n        let random = Math.floor(Math.random() * (max - min) + min);\n        if (random === matrix[i][j]) {\n          random = random + 1;\n        }\n        let losingIndex = matrix[i][j];\n        let arrayToChangePosition = matrix[i];\n        const lastIndex = arrayToChangePosition.lastIndexOf(random);\n        arrayToChangePosition[j] = random;\n        arrayToChangePosition[lastIndex] = losingIndex;\n        matrix[i] = arrayToChangePosition;\n      }\n    }\n  }\n  return matrix;\n};\nfunction winningArray(arr) {\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) {\n      return arr;\n    }\n    if (arr[i] === arr[i + 1] && i === 0) {\n      arr[i + 2] = arr[i];\n      return arr;\n    }\n    if (arr[i] === arr[i + 1] && i !== 0) {\n      arr[i - 1] = arr[i];\n      return arr;\n    }\n  }\n  let winning = arr[0];\n  arr[1] = winning;\n  arr[2] = winning;\n  return arr;\n}\n\n// export const winningCombination = (arr1, arr2, arr3, arr4, arr5) => {\n//   let matrix = [[...arr1], [...arr2], [...arr3], [...arr4], [...arr5]];\n//   for (let i = 0; i < matrix.length - 2; i++) {\n//     for (let j = 0; j < arr1.length; j++) {\n//       if (matrix[i][j] === matrix[i + 1][j]) {\n//         let winingIndex = matrix[i][j];\n//         let arrayToChangePosition = matrix[i + 2];\n//         let indexToSwithPositon = arrayToChangePosition.indexOf(winingIndex);\n//         arrayToChangePosition[indexToSwithPositon] = arrayToChangePosition[j];\n//         arrayToChangePosition[j] = winingIndex;\n//         matrix[i + 2] = arrayToChangePosition;\n//       }\n//     }\n//   }\n//   return matrix;\n// };\n\nfunction initShuffleArray(arr) {\n  for (let i = 0; i < arr.length - 2; i++) {\n    const j = Math.floor(Math.random() * (arr.length - i) + i);\n    let current = arr[i];\n    let random = arr[j];\n    arr[j] = current;\n    arr[i] = random;\n  }\n  return [...arr];\n}\nexport const winningCombination = (arr1, arr2, arr3, arr4, arr5) => {\n  let matrix = [[...initShuffleArray(arr1)], [...initShuffleArray(arr2)], [...initShuffleArray(arr3)], [...initShuffleArray(arr4)], [...initShuffleArray(arr5)]];\n  let horizontal1 = matrix.map(item => item[0]);\n  let horizontal2 = matrix.map(item => item[1]);\n  let horizontal3 = matrix.map(item => item[2]);\n  let horizontal4 = matrix.map(item => item[3]);\n  let horizontal5 = matrix.map(item => item[4]);\n  let horizontal6 = matrix.map(item => item[5]);\n  let horizontal7 = matrix.map(item => item[6]);\n  let horizontal8 = matrix.map(item => item[7]);\n  let horizontal9 = matrix.map(item => item[8]);\n  //da bismo imali pobednicku kombinaciju svaki treci treba da bude pobednicki\n  //a ostala dva mozemo da napravimo da budu gubitnicki\n  //tako cemo pri svakom vrtenju da imamo samo jednu dobitnu kombinaciju\n\n  horizontal1 = winningArray(horizontal1);\n  horizontal4 = winningArray(horizontal4);\n  horizontal7 = winningArray(horizontal7);\n  //sada moramo samo da vratimo u pocetni polozaj\n\n  let matrix1 = [[...horizontal1], [...horizontal2], [...horizontal3], [...horizontal4], [...horizontal5], [...horizontal6], [...horizontal7], [...horizontal8], [...horizontal9]];\n  let vertical1 = matrix1.map(item => item[0]);\n  let vertical2 = matrix1.map(item => item[1]);\n  let vertical3 = matrix1.map(item => item[2]);\n  let vertical4 = matrix1.map(item => item[3]);\n  let vertical5 = matrix1.map(item => item[4]);\n  let completedMatrix = [[...vertical1], [...vertical2], [...vertical3], [...vertical4], [...vertical5]];\n  console.log(completedMatrix);\n  return completedMatrix;\n};\nexport const settingSymbols = (reelIndexArray, slotSymbols) => {\n  let indexes = [...reelIndexArray];\n  let symbols = [];\n  for (let i = 0; i < indexes.length; i++) {\n    slotSymbols.forEach(item => {\n      if (item.id === indexes[i]) {\n        symbols.push({\n          ...item\n        });\n      }\n    });\n  }\n  return [...symbols, ...symbols];\n};\n\n//function that calculate how much do we need to move the div to be centered,\n//after stoping the animation\n\nexport const deltaAfterStopingAnimation = (positionFromBottom, symbolHeight) => {\n  let delta;\n  if (positionFromBottom % symbolHeight === 0) return 0;\n  if (positionFromBottom < symbolHeight) return positionFromBottom;else {\n    while (positionFromBottom - symbolHeight >= symbolHeight / 4) {\n      delta = positionFromBottom - symbolHeight;\n      positionFromBottom = positionFromBottom - symbolHeight;\n    }\n    return delta;\n  }\n};","map":{"version":3,"names":["losingCombination","arr1","arr2","arr3","arr4","arr5","matrix","min","Math","max","i","length","j","random","floor","losingIndex","arrayToChangePosition","lastIndex","lastIndexOf","winningArray","arr","winning","initShuffleArray","current","winningCombination","horizontal1","map","item","horizontal2","horizontal3","horizontal4","horizontal5","horizontal6","horizontal7","horizontal8","horizontal9","matrix1","vertical1","vertical2","vertical3","vertical4","vertical5","completedMatrix","console","log","settingSymbols","reelIndexArray","slotSymbols","indexes","symbols","forEach","id","push","deltaAfterStopingAnimation","positionFromBottom","symbolHeight","delta"],"sources":["C:/Users/Maja Knezevic/Desktop/s/src/helperFunctions.js"],"sourcesContent":["export const losingCombination = (arr1, arr2, arr3, arr4, arr5) => {\n  let matrix = [[...arr1], [...arr2], [...arr3], [...arr4], [...arr5]];\n  let min = Math.min(...arr1);\n  let max = Math.max(...arr1);\n\n  for (let i = 0; i < matrix.length - 2; i++) {\n    for (let j = 0; j < arr1.length; j++) {\n      if (\n        matrix[i][j] === matrix[i + 1][j] &&\n        matrix[i][j] === matrix[i + 2][j]\n      ) {\n        let random = Math.floor(Math.random() * (max - min) + min);\n        if (random === matrix[i][j]) {\n          random = random + 1;\n        }\n\n        let losingIndex = matrix[i][j];\n\n        let arrayToChangePosition = matrix[i];\n\n        const lastIndex = arrayToChangePosition.lastIndexOf(random);\n\n        arrayToChangePosition[j] = random;\n        arrayToChangePosition[lastIndex] = losingIndex;\n\n        matrix[i] = arrayToChangePosition;\n      }\n    }\n  }\n  return matrix;\n};\n\nfunction winningArray(arr) {\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) {\n      return arr;\n    }\n    if (arr[i] === arr[i + 1] && i === 0) {\n      arr[i + 2] = arr[i];\n      return arr;\n    }\n    if (arr[i] === arr[i + 1] && i !== 0) {\n      arr[i - 1] = arr[i];\n      return arr;\n    }\n  }\n\n  let winning = arr[0];\n  arr[1] = winning;\n  arr[2] = winning;\n  return arr;\n}\n\n// export const winningCombination = (arr1, arr2, arr3, arr4, arr5) => {\n//   let matrix = [[...arr1], [...arr2], [...arr3], [...arr4], [...arr5]];\n//   for (let i = 0; i < matrix.length - 2; i++) {\n//     for (let j = 0; j < arr1.length; j++) {\n//       if (matrix[i][j] === matrix[i + 1][j]) {\n//         let winingIndex = matrix[i][j];\n//         let arrayToChangePosition = matrix[i + 2];\n//         let indexToSwithPositon = arrayToChangePosition.indexOf(winingIndex);\n//         arrayToChangePosition[indexToSwithPositon] = arrayToChangePosition[j];\n//         arrayToChangePosition[j] = winingIndex;\n//         matrix[i + 2] = arrayToChangePosition;\n//       }\n//     }\n//   }\n//   return matrix;\n// };\n\nfunction initShuffleArray(arr) {\n  for (let i = 0; i < arr.length - 2; i++) {\n    const j = Math.floor(Math.random() * (arr.length - i) + i);\n    let current = arr[i];\n    let random = arr[j];\n    arr[j] = current;\n    arr[i] = random;\n  }\n  return [...arr];\n}\nexport const winningCombination = (arr1, arr2, arr3, arr4, arr5) => {\n  let matrix = [\n    [...initShuffleArray(arr1)],\n    [...initShuffleArray(arr2)],\n    [...initShuffleArray(arr3)],\n    [...initShuffleArray(arr4)],\n    [...initShuffleArray(arr5)],\n  ];\n\n  let horizontal1 = matrix.map((item) => item[0]);\n  let horizontal2 = matrix.map((item) => item[1]);\n  let horizontal3 = matrix.map((item) => item[2]);\n  let horizontal4 = matrix.map((item) => item[3]);\n  let horizontal5 = matrix.map((item) => item[4]);\n  let horizontal6 = matrix.map((item) => item[5]);\n  let horizontal7 = matrix.map((item) => item[6]);\n  let horizontal8 = matrix.map((item) => item[7]);\n  let horizontal9 = matrix.map((item) => item[8]);\n  //da bismo imali pobednicku kombinaciju svaki treci treba da bude pobednicki\n  //a ostala dva mozemo da napravimo da budu gubitnicki\n  //tako cemo pri svakom vrtenju da imamo samo jednu dobitnu kombinaciju\n\n  horizontal1 = winningArray(horizontal1);\n  horizontal4 = winningArray(horizontal4);\n  horizontal7 = winningArray(horizontal7);\n  //sada moramo samo da vratimo u pocetni polozaj\n\n  let matrix1 = [\n    [...horizontal1],\n    [...horizontal2],\n    [...horizontal3],\n    [...horizontal4],\n    [...horizontal5],\n    [...horizontal6],\n    [...horizontal7],\n    [...horizontal8],\n    [...horizontal9],\n  ];\n\n  let vertical1 = matrix1.map((item) => item[0]);\n  let vertical2 = matrix1.map((item) => item[1]);\n  let vertical3 = matrix1.map((item) => item[2]);\n  let vertical4 = matrix1.map((item) => item[3]);\n  let vertical5 = matrix1.map((item) => item[4]);\n\n  let completedMatrix = [\n    [...vertical1],\n    [...vertical2],\n    [...vertical3],\n    [...vertical4],\n    [...vertical5],\n  ];\n  console.log(completedMatrix);\n  return completedMatrix;\n};\n\nexport const settingSymbols = (reelIndexArray, slotSymbols) => {\n  let indexes = [...reelIndexArray];\n\n  let symbols = [];\n  for (let i = 0; i < indexes.length; i++) {\n    slotSymbols.forEach((item) => {\n      if (item.id === indexes[i]) {\n        symbols.push({ ...item });\n      }\n    });\n  }\n  return [...symbols, ...symbols];\n};\n\n//function that calculate how much do we need to move the div to be centered,\n//after stoping the animation\n\nexport const deltaAfterStopingAnimation = (\n  positionFromBottom,\n  symbolHeight\n) => {\n  let delta;\n  if (positionFromBottom % symbolHeight === 0) return 0;\n  if (positionFromBottom < symbolHeight) return positionFromBottom;\n  else {\n    while (positionFromBottom - symbolHeight >= symbolHeight / 4) {\n      delta = positionFromBottom - symbolHeight;\n      positionFromBottom = positionFromBottom - symbolHeight;\n    }\n    return delta;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}