{"ast":null,"code":"export const losingCombination = (arr1, arr2, arr3, arr4, arr5) => {\n  let matrix = [[...arr1], [...arr2], [...arr3], [...arr4], [...arr5]];\n  let min = Math.min(...arr1);\n  let max = Math.max(...arr1);\n  for (let i = 0; i < matrix.length - 2; i++) {\n    for (let j = 0; j < arr1.length; j++) {\n      if (matrix[i][j] === matrix[i + 1][j] && matrix[i][j] === matrix[i + 2][j]) {\n        let random = Math.floor(Math.random() * (max - min) + min);\n        if (random === matrix[i][j]) {\n          random = random + 1;\n        }\n        let losingIndex = matrix[i][j];\n        let arrayToChangePosition = matrix[i];\n        const lastIndex = arrayToChangePosition.lastIndexOf(random);\n        arrayToChangePosition[j] = random;\n        arrayToChangePosition[lastIndex] = losingIndex;\n        matrix[i] = arrayToChangePosition;\n      }\n    }\n  }\n  return matrix;\n};\nexport const winningCombination = (arr1, arr2, arr3, arr4, arr5) => {\n  let matrix = [[...arr1], [...arr2], [...arr3], [...arr4], [...arr5]];\n  for (let i = 0; i < matrix.length - 2; i++) {\n    for (let j = 0; j < arr1.length; j++) {\n      if (matrix[i][j] === matrix[i + 1][j]) {\n        let winingIndex = matrix[i][j];\n        let arrayToChangePosition = matrix[i + 2];\n        let indexToSwithPositon = arrayToChangePosition.indexOf(winingIndex);\n        arrayToChangePosition[indexToSwithPositon] = arrayToChangePosition[j];\n        arrayToChangePosition[j] = winingIndex;\n        matrix[i + 2] = arrayToChangePosition;\n      }\n    }\n  }\n  return matrix;\n};\nexport const settingSymbols = (reelIndexArray, slotSymbols) => {\n  let indexes = [...reelIndexArray];\n  let symbols = [];\n  for (let i = 0; i < indexes.length; i++) {\n    slotSymbols.forEach(item => {\n      if (item.id === indexes[i]) {\n        symbols.push({\n          ...item\n        });\n      }\n    });\n  }\n  return symbols;\n};\n\n//function that calculate how much do we need to move the div to be centered,\n//after stopin the animation\nexport const alignAfterStopingAnimation = (positionFromBottom, symbolHeight) => {\n  let move;\n  if (positionFromBottom % 4 === 0) return;else {\n    while (positionFromBottom - symbolHeight > symbolHeight) {\n      move = positionFromBottom - symbolHeight;\n      positionFromBottom = positionFromBottom - symbolHeight;\n    }\n    return move - symbolHeight;\n  }\n};","map":{"version":3,"names":["losingCombination","arr1","arr2","arr3","arr4","arr5","matrix","min","Math","max","i","length","j","random","floor","losingIndex","arrayToChangePosition","lastIndex","lastIndexOf","winningCombination","winingIndex","indexToSwithPositon","indexOf","settingSymbols","reelIndexArray","slotSymbols","indexes","symbols","forEach","item","id","push","alignAfterStopingAnimation","positionFromBottom","symbolHeight","move"],"sources":["C:/Users/Maja Knezevic/Desktop/s/src/helperFunctions.js"],"sourcesContent":["export const losingCombination = (arr1, arr2, arr3, arr4, arr5) => {\n  let matrix = [[...arr1], [...arr2], [...arr3], [...arr4], [...arr5]];\n  let min = Math.min(...arr1);\n  let max = Math.max(...arr1);\n\n  for (let i = 0; i < matrix.length - 2; i++) {\n    for (let j = 0; j < arr1.length; j++) {\n      if (\n        matrix[i][j] === matrix[i + 1][j] &&\n        matrix[i][j] === matrix[i + 2][j]\n      ) {\n        let random = Math.floor(Math.random() * (max - min) + min);\n        if (random === matrix[i][j]) {\n          random = random + 1;\n        }\n\n        let losingIndex = matrix[i][j];\n\n        let arrayToChangePosition = matrix[i];\n\n        const lastIndex = arrayToChangePosition.lastIndexOf(random);\n\n        arrayToChangePosition[j] = random;\n        arrayToChangePosition[lastIndex] = losingIndex;\n\n        matrix[i] = arrayToChangePosition;\n      }\n    }\n  }\n  return matrix;\n};\n\nexport const winningCombination = (arr1, arr2, arr3, arr4, arr5) => {\n  let matrix = [[...arr1], [...arr2], [...arr3], [...arr4], [...arr5]];\n  for (let i = 0; i < matrix.length - 2; i++) {\n    for (let j = 0; j < arr1.length; j++) {\n      if (matrix[i][j] === matrix[i + 1][j]) {\n        let winingIndex = matrix[i][j];\n        let arrayToChangePosition = matrix[i + 2];\n        let indexToSwithPositon = arrayToChangePosition.indexOf(winingIndex);\n        arrayToChangePosition[indexToSwithPositon] = arrayToChangePosition[j];\n        arrayToChangePosition[j] = winingIndex;\n        matrix[i + 2] = arrayToChangePosition;\n      }\n    }\n  }\n  return matrix;\n};\n\nexport const settingSymbols = (reelIndexArray, slotSymbols) => {\n  let indexes = [...reelIndexArray];\n\n  let symbols = [];\n  for (let i = 0; i < indexes.length; i++) {\n    slotSymbols.forEach((item) => {\n      if (item.id === indexes[i]) {\n        symbols.push({ ...item });\n      }\n    });\n  }\n  return symbols;\n};\n\n//function that calculate how much do we need to move the div to be centered,\n//after stopin the animation\nexport const alignAfterStopingAnimation = (\n  positionFromBottom,\n  symbolHeight\n) => {\n  let move;\n  if (positionFromBottom % 4 === 0) return;\n  else {\n    while (positionFromBottom - symbolHeight > symbolHeight) {\n      move = positionFromBottom - symbolHeight;\n      positionFromBottom = positionFromBottom - symbolHeight;\n    }\n    return move - symbolHeight;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}